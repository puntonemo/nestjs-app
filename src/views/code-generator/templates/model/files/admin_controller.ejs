import {
    Controller,
    Get,
    Post,
    Body,
    Query,
    Patch,
    Param,
    Delete
    // UseGuards
    // UseInterceptors
} from '@nestjs/common';
import { <%-model_name_plural%>AdminService } from '@model/<%-model_name_plural_lowercase%>/<%-model_name_plural_lowercase%>.admin.service';
import { Create<%-model_name%>Dto, Find<%-model_name%>Dto, Update<%-model_name%>Dto } from '@model/<%-model_name_plural_lowercase%>';
import { User } from '@model/users';
import { AuthUser } from '@lib/auth/decorators/user.decorator';
import { ApiOperation, ApiTags } from '@nestjs/swagger';
// import { isPublic } from '@lib/auth/decorators/isPublic.decorator';
// import { Rol } from '@lib/auth/decorators/rol.decorator';
// import { JwtAuthGuard } from '@lib/auth/guards/jwt.guard';
// import { RolesGuard } from '@lib/auth/guards/roles.guard';
// import { SchemaFromRol } from '@lib/core/interceptors/ClassSerializerSchema.decorators';
// import { ClassSerializerSchemaInterceptor } from '@lib/core/interceptors/ClassSerializerSchema';

@ApiTags('<%-model_name_plural%>')
@Controller('<%-model_name_plural_lowercase%>')
// @UseGuards(JwtAuthGuard, RolesGuard, PermissionsGuard)
// @UseInterceptors(ClassSerializerSchemaInterceptor)
export class <%-model_name_plural%>AdminController {
    constructor(private readonly <%-model_name_plural_lowercase%>AdminService: <%-model_name_plural%>AdminService) {}
    
    @ApiOperation({ description: 'Create a new <%-model_name%>' })
    @Post()
    create(@Body() create<%-model_name%>Dto: Create<%-model_name%>Dto, @AuthUser() user: User) {
        return this.<%-model_name_plural_lowercase%>AdminService.create(create<%-model_name%>Dto, user);
    }

    @ApiOperation({ description: 'Find <%-model_name_plural%>' })
    @Get()
    //@isPublic()
    findAll(@Query() filters: Find<%-model_name%>Dto) {
        return this.<%-model_name_plural_lowercase%>AdminService.findAll(filters);
    }

    @ApiOperation({ description: 'Get a <%-model_name%>' })
    @Get(':id')
    findOne(@Param('id') id: string) {
        return this.<%-model_name_plural_lowercase%>AdminService.findOne(id);
    }

    @ApiOperation({ description: 'Update a <%-model_name%>' })
    @Patch(':id')
    update(
        @Param('id') id: string,
        @Body() update<%-model_name%>Dto: Update<%-model_name%>Dto,
        @AuthUser() user: User
    ) {
        return this.<%-model_name_plural_lowercase%>AdminService.update(id, update<%-model_name%>Dto, user);
    }

    @ApiOperation({ description: 'Delete a <%-model_name%>' })
    @Delete(':id')
    remove(@Param('id') id: string) {
        return this.<%-model_name_plural_lowercase%>AdminService.remove(id);
    }
}
